#!/bin/bash
# CREATE NEW PLUGIN DOCUMENTATION

################################################################################
################################# Constants ####################################
################################################################################

if [[ "$(basename "$(pwd)")" == "-scripts" ]]; then
  cd ..
fi

echo "Working directory: $(pwd)"

# Constant for template directory
TEMPLATE_DIR="./-new-material-templates/plugin-documentation-templates/ROOT"

# Template files generated by the script
plugin_template="$TEMPLATE_DIR/pages/pluginpage.adoc"
# demos
demo_html_template="$TEMPLATE_DIR/examples/live-demos/<plugincode>/index.html"
demo_js_template="$TEMPLATE_DIR/examples/live-demos/<plugincode>/index.js"
# partials
configuration_option_template="$TEMPLATE_DIR/partials/configuration/<configuration_option>.adoc"
commands_template="$TEMPLATE_DIR/partials/commands/<plugincode>-cmds.adoc"
events_template="$TEMPLATE_DIR/partials/events/<plugincode>-events.adoc"
menu_items_template="$TEMPLATE_DIR/partials/menu-item-ids/<plugincode>-menu-items.adoc"
apis_template="$TEMPLATE_DIR/partials/plugin-apis/<plugincode>-apis.adoc"
toolbar_buttons_template="$TEMPLATE_DIR/partials/toolbar-button-ids/<plugincode>-toolbar-buttons.adoc"

# Verify that all template files exist
if [[ ! -e "$plugin_template" || ! -e "$configuration_option_template" || ! -e "$commands_template" || ! -e "$demo_html_template" || ! -e "$demo_js_template" || ! -e "$events_template" || ! -e "$menu_items_template" || ! -e "$apis_template" || ! -e "$toolbar_buttons_template" ]]; then
  echo "Error: One or more template files are missing"
  exit 1
fi

# Files the user needs to created or updated manually
icon_list="./-new-material-templates/plugin-documentation-templates/ROOT/partials/configuration/icon_list.adoc"
demo_example="./-new-material-templates/plugin-documentation-templates/ROOT/examples/live-demos/<plugincode>/example.js"
nav="./-new-material-templates/plugin-documentation-templates/ROOT/nav.adoc"
# demos
full_featured_html="./-new-material-templates/plugin-documentation-templates/ROOT/examples/live-demos/full-featured/index.html"
full_featured_js="./-new-material-templates/plugin-documentation-templates/ROOT/examples/live-demos/full-featured/index.js"
# pages
available_menu_items="./-new-material-templates/plugin-documentation-templates/ROOT/pages/available-menu-items.adoc"
available_toolbar_buttons="./-new-material-templates/plugin-documentation-templates/ROOT/pages/available-toolbar-buttons.adoc"
editor_command_identifiers="./-new-material-templates/plugin-documentation-templates/ROOT/pages/editor-command-identifiers.adoc"
events="./-new-material-templates/plugin-documentation-templates/ROOT/pages/events.adoc"
opensource_plugins="./-new-material-templates/plugin-documentation-templates/ROOT/partials/index-pages/opensource-plugins.adoc"
premium_plugins="./-new-material-templates/plugin-documentation-templates/ROOT/partials/index-pages/premium-plugins.adoc"

################################################################################
################################# User Input ###################################
################################################################################

# Plugin code
read -p "Enter the plugin code: " plugin_code

plugin_file="./modules/ROOT/pages/$plugin_code.adoc"

while [[ -e "$plugin_file" || -z "$(echo "$plugin_code" | tr -d '[:space:]')" ]]; do
  if [[ -e "$plugin_file" ]]; then
    echo "Error: File already exists: $plugin_file"
  else
    echo "Error: Plugin code cannot be empty or whitespace"
  fi
  read -p "Please enter a different plugin code: " plugin_code
  plugin_file="./modules/ROOT/pages/$plugin_code.adoc"
done

# Plugin name
read -p "Enter the plugin name: " plugin_name

while [[ -z "$(echo "$plugin_name" | tr -d '[:space:]')" ]]; do
  echo "Error: Plugin name cannot be empty or whitespace"
  read -p "Please enter a different plugin name: " plugin_name
done

# Configuration options
config_options=()
while true; do
  read -p "Enter a configuration option (leave empty to finish): " option
  if [[ -z $option ]]; then
    break
  fi
  config_options+=("$option")
done

# Commands
read -p "Does the plugin have any commands? (y/n): " has_commands

# Events
read -p "Does the plugin have any events? (y/n): " has_events

# Menu items
read -p "Does the plugin have any menu items? (y/n): " has_menu_items

# APIs
read -p "Does the plugin have any APIs? (y/n): " has_apis

# Toolbar buttons
read -p "Does the plugin have any toolbar buttons? (y/n): " has_toolbar_buttons

# Demo
read -p "Does the plugin have a demo? (y/n): " has_demo

################################################################################
############################### Confirm Creation ###############################
################################################################################

# List all files to be created
echo "Files to be created:"
printf "%-30s %s\n" "Plugin File:" "$plugin_file"

# Configuration options
for option in "${config_options[@]}"; do
  configuration_option_file="./modules/ROOT/partials/configuration/$option.adoc"
  printf "%-30s %s\n" "Configuration Option File:" "$configuration_option_file"
done

# Commands
if [[ $has_commands == "y" ]]; then
  commands_file="./modules/ROOT/partials/commands/$plugin_code-cmds.adoc"
  printf "%-30s %s\n" "Commands File:" "$commands_file"
fi

# Events
if [[ $has_events == "y" ]]; then
  events_file="./modules/ROOT/partials/events/$plugin_code-events.adoc"
  printf "%-30s %s\n" "Events File:" "$events_file"
fi

# Menu items
if [[ $has_menu_items == "y" ]]; then
  menu_items_file="./modules/ROOT/partials/menu-item-ids/$plugin_code-menu-items.adoc"
  printf "%-30s %s\n" "Menu Items File:" "$menu_items_file"
fi

# APIs
if [[ $has_apis == "y" ]]; then
  apis_file="./modules/ROOT/partials/plugin-apis/$plugin_code-apis.adoc"
  printf "%-30s %s\n" "APIs File:" "$apis_file"
fi

# Toolbar buttons
if [[ $has_toolbar_buttons == "y" ]]; then
  toolbar_buttons_file="./modules/ROOT/partials/toolbar-button-ids/$plugin_code-toolbar-buttons.adoc"
  printf "%-30s %s\n" "Toolbar Buttons File:" "$toolbar_buttons_file"
fi

# Demo
if [[ $has_demo == "y" ]]; then
  demo_html_file="./modules/ROOT/examples/live-demos/$plugin_code/index.html"
  demo_js_file="./modules/ROOT/examples/live-demos/$plugin_code/index.js"
  printf "%-30s %s\n" "Demo HTML File:" "$demo_html_file"
  printf "%-30s %s\n" "Demo JS File:" "$demo_js_file"
fi

# Prompt the user to confirm before creating files
read -p "Do you want to create the above files? (y/n): " confirm

while [[ $confirm != "y" && $confirm != "n" ]]; do
  echo "Error: Please enter 'y' or 'n'"
  read -p "Do you want to create the above files? (y/n): " confirm
done

if [[ $confirm != "y" ]]; then
  echo "Files creation cancelled."
  exit 0
fi

################################################################################
################################# Create Files #################################
################################################################################

# Create plugin file
cp "$plugin_template" "$plugin_file"
sed -i "" "s/<plugincode>/$plugin_code/g" "$plugin_file"
sed -i "" "s/<Plugin name>/$plugin_name/g" "$plugin_file"

# Create configuration option files
for option in "${config_options[@]}"; do
  configuration_option_file="./modules/ROOT/partials/configuration/$option.adoc"

  cp "$configuration_option_template" "$configuration_option_file"
  sed -i "" "s/<configuration_option>/$option/g" "$configuration_option_file"
done

# Create commands file
if [[ $has_commands == "y" ]]; then
  cp "$commands_template" "$commands_file"
fi

# Create events file
if [[ $has_events == "y" ]]; then
  cp "$events_template" "$events_file"
  sed -i "" "s/<plugincode>/$plugin_code/g" "$events_file"
  sed -i "" "s/<Plugin name>/$plugin_name/g" "$events_file"
fi

# Create menu items file
if [[ $has_menu_items == "y" ]]; then
  cp "$menu_items_template" "$menu_items_file"
fi

# Create APIs file
if [[ $has_apis == "y" ]]; then
  cp "$apis_template" "$apis_file"
  sed -i "" "s/<plugincode>/$plugin_code/g" "$apis_file"
fi

# Create toolbar buttons file
if [[ $has_toolbar_buttons == "y" ]]; then
  cp "$toolbar_buttons_template" "$toolbar_buttons_file"
fi

# Create demo files
if [[ $has_demo == "y" ]]; then
  mkdir -p "./modules/ROOT/examples/live-demos/$plugin_code"
  cp "$demo_html_template" "$demo_html_file"
  cp "$demo_js_template" "$demo_js_file"
  sed -i "" "s/<plugincode>/$plugin_code/g" "$demo_html_file"
  sed -i "" "s/<plugincode>/$plugin_code/g" "$demo_js_file"
fi

# Add configuration options to plugin file
target_line_number=$(grep -n -F "include::partial\$configuration/<setting_name>.adoc[leveloffset=+1]" "$plugin_file" | cut -d ":" -f 1)

for option in "${config_options[@]}"; do
  new_line="include::partial\$configuration/$option.adoc[leveloffset=+1]"
  sed -i "" "$target_line_number a\\
$new_line" "$plugin_file"
  ((target_line_number++))
done

sed -i "" "/include::partial\$configuration\/<setting_name>.adoc\[leveloffset=+1\]/d" "$plugin_file"

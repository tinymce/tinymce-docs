#!/bin/bash
# CREATE NEW PLUGIN DOCUMENTATION

# This script is used to create a new plugin for TinyMCE.
#
# The script prompts the user for the plugin code, plugin name, and various plugin features such as configuration options, commands, events, menu items, APIs, toolbar buttons, and demo. It generates the necessary files for the plugin documentation using the template files in the -new-material-templates repository. Most of the files are automatically placed in the correct directory, while some files need to be manually relocated. The manual files are organized in nested directories at the root of the repository, and a checklist file is created to track the manual files that require updates. The automatically generated files still need to be customized with relevant details about the plugin.
#
# For example, if you create a plugin called `test`, a directory named `test` will be created with the required files inside it. The checklist file will be located at `test/checklist.md`.
# Usage: npm run new-plugin

################################################################################
################################# Constants ####################################
################################################################################

if [[ "$(basename "$(pwd)")" == "-scripts" ]]; then
  cd ..
fi

echo "Working directory: $(pwd)"

# Constant for template directory
TEMPLATE_DIR="./-new-material-templates/plugin-documentation-templates/ROOT"

# Template files generated by the script
plugin_template="$TEMPLATE_DIR/pages/pluginpage.adoc"
# demos
demo_html_template="$TEMPLATE_DIR/examples/live-demos/_plugincode_/index.html"
demo_js_template="$TEMPLATE_DIR/examples/live-demos/_plugincode_/index.js"
# partials
configuration_option_template="$TEMPLATE_DIR/partials/configuration/_configuration_option_.adoc"
commands_template="$TEMPLATE_DIR/partials/commands/_plugincode_-cmds.adoc"
events_template="$TEMPLATE_DIR/partials/events/_plugincode_-events.adoc"
menu_items_template="$TEMPLATE_DIR/partials/menu-item-ids/_plugincode_-menu-items.adoc"
apis_template="$TEMPLATE_DIR/partials/plugin-apis/_plugincode_-apis.adoc"
toolbar_buttons_template="$TEMPLATE_DIR/partials/toolbar-button-ids/_plugincode_-toolbar-buttons.adoc"

# Verify that all template files exist
if [[ ! -e "$plugin_template" || ! -e "$configuration_option_template" || ! -e "$commands_template" || ! -e "$demo_html_template" || ! -e "$demo_js_template" || ! -e "$events_template" || ! -e "$menu_items_template" || ! -e "$apis_template" || ! -e "$toolbar_buttons_template" ]]; then
  echo "Error: One or more template files are missing"
  exit 1
fi

# Files the user needs to create or update manually
icon_list="$TEMPLATE_DIR/partials/configuration/icon_list.adoc"
demo_example="$TEMPLATE_DIR/examples/live-demos/_plugincode_/example.js"
nav="$TEMPLATE_DIR/nav.adoc"
# demos
full_featured_html="$TEMPLATE_DIR/examples/live-demos/full-featured/index.html"
full_featured_js="$TEMPLATE_DIR/examples/live-demos/full-featured/index.js"
# pages
available_menu_items="$TEMPLATE_DIR/pages/available-menu-items.adoc"
available_toolbar_buttons="$TEMPLATE_DIR/pages/available-toolbar-buttons.adoc"
editor_command_identifiers="$TEMPLATE_DIR/pages/editor-command-identifiers.adoc"
events="$TEMPLATE_DIR/pages/events.adoc"
opensource_plugins="$TEMPLATE_DIR/partials/index-pages/opensource-plugins.adoc"
premium_plugins="$TEMPLATE_DIR/partials/index-pages/premium-plugins.adoc"

# Verify that all manual files exist
if [[ ! -e "$icon_list" || ! -e "$demo_example" || ! -e "$nav" || ! -e "$full_featured_html" || ! -e "$full_featured_js" || ! -e "$available_menu_items" || ! -e "$available_toolbar_buttons" || ! -e "$editor_command_identifiers" || ! -e "$events" || ! -e "$opensource_plugins" || ! -e "$premium_plugins" ]]; then
  echo "Error: One or more manual files are missing"
  exit 1
fi

################################################################################
################################# User Input ###################################
################################################################################

# Plugin code
read -p "Enter the plugin code: " plugin_code

plugin_file="./modules/ROOT/pages/$plugin_code.adoc"

while [[ -e "$plugin_file" || -z "$(echo "$plugin_code" | tr -d '[:space:]')" ]]; do
  if [[ -e "$plugin_file" ]]; then
    echo "Error: File already exists: $plugin_file"
  else
    echo "Error: Plugin code cannot be empty or whitespace"
  fi
  read -p "Please enter a different plugin code: " plugin_code
  plugin_file="./modules/ROOT/pages/$plugin_code.adoc"
done

# Plugin name
read -p "Enter the plugin name: " plugin_name

while [[ -z "$(echo "$plugin_name" | tr -d '[:space:]')" ]]; do
  echo "Error: Plugin name cannot be empty or whitespace"
  read -p "Please enter a different plugin name: " plugin_name
done

# Open-source or premium plugin
read -p "Is this a premium plugin? (y/n): " is_premium
if [[ $is_premium == "y" ]]; then
  category="premium"
else
  category="opensource"
fi

# Configuration options
config_options=()
while true; do
  read -p "Enter a configuration option (leave empty to finish): " option
  if [[ -z $option ]]; then
    break
  fi
  config_options+=("$option")
done

# Commands
read -p "Does the plugin have any commands? (y/n): " has_commands

# Events
read -p "Does the plugin have any events? (y/n): " has_events

# Menu items
read -p "Does the plugin have any menu items? (y/n): " has_menu_items

# APIs
read -p "Does the plugin have any APIs? (y/n): " has_apis

# Toolbar buttons
read -p "Does the plugin have any toolbar buttons? (y/n): " has_toolbar_buttons

# Demo
read -p "Does the plugin have a demo? (y/n): " has_demo

################################################################################
############################### Confirm Creation ###############################
################################################################################

# List all files to be created
echo "Plugin Code: $plugin_code"
echo "Plugin Name: $plugin_name"
echo "Plugin Category: $category"
echo "Files to be created:"
printf "%-30s %s\n" "Plugin File:" "$plugin_file"

# Configuration options
for option in "${config_options[@]}"; do
  configuration_option_file="./modules/ROOT/partials/configuration/$option.adoc"
  printf "%-30s %s\n" "Configuration Option File:" "$configuration_option_file"
done

# Commands
if [[ $has_commands == "y" ]]; then
  commands_file="./modules/ROOT/partials/commands/$plugin_code-cmds.adoc"
  printf "%-30s %s\n" "Commands File:" "$commands_file"
fi

# Events
if [[ $has_events == "y" ]]; then
  events_file="./modules/ROOT/partials/events/$plugin_code-events.adoc"
  printf "%-30s %s\n" "Events File:" "$events_file"
fi

# Menu items
if [[ $has_menu_items == "y" ]]; then
  menu_items_file="./modules/ROOT/partials/menu-item-ids/$plugin_code-menu-items.adoc"
  printf "%-30s %s\n" "Menu Items File:" "$menu_items_file"
fi

# APIs
if [[ $has_apis == "y" ]]; then
  apis_file="./modules/ROOT/partials/plugin-apis/$plugin_code-apis.adoc"
  printf "%-30s %s\n" "APIs File:" "$apis_file"
fi

# Toolbar buttons
if [[ $has_toolbar_buttons == "y" ]]; then
  toolbar_buttons_file="./modules/ROOT/partials/toolbar-button-ids/$plugin_code-toolbar-buttons.adoc"
  printf "%-30s %s\n" "Toolbar Buttons File:" "$toolbar_buttons_file"
fi

# Demo
if [[ $has_demo == "y" ]]; then
  demo_html_file="./modules/ROOT/examples/live-demos/$plugin_code/index.html"
  demo_js_file="./modules/ROOT/examples/live-demos/$plugin_code/index.js"
  printf "%-30s %s\n" "Demo HTML File:" "$demo_html_file"
  printf "%-30s %s\n" "Demo JS File:" "$demo_js_file"
fi

# Prompt the user to confirm before creating files
read -p "Do you want to create the above files? (y/n): " confirm

while [[ $confirm != "y" && $confirm != "n" ]]; do
  echo "Error: Please enter 'y' or 'n'"
  read -p "Do you want to create the above files? (y/n): " confirm
done

if [[ $confirm != "y" ]]; then
  echo "Files creation cancelled."
  exit 0
fi

################################################################################
################################# Create Files #################################
################################################################################

# Create plugin file
cp "$plugin_template" "$plugin_file"
sed -i "" "s/<plugincode>/$plugin_code/g" "$plugin_file"
sed -i "" "s/<Plugin name>/$plugin_name/g" "$plugin_file"
sed -i "" "s/<premium|opensource>/$category/g" "$plugin_file"

# Create configuration option files
for option in "${config_options[@]}"; do
  configuration_option_file="./modules/ROOT/partials/configuration/$option.adoc"

  cp "$configuration_option_template" "$configuration_option_file"
  sed -i "" "s/<configuration_option>/$option/g" "$configuration_option_file"
done

# Create commands file
if [[ $has_commands == "y" ]]; then
  cp "$commands_template" "$commands_file"
fi

# Create events file
if [[ $has_events == "y" ]]; then
  cp "$events_template" "$events_file"
  sed -i "" "s/<plugincode>/$plugin_code/g" "$events_file"
  sed -i "" "s/<Plugin name>/$plugin_name/g" "$events_file"
fi

# Create menu items file
if [[ $has_menu_items == "y" ]]; then
  cp "$menu_items_template" "$menu_items_file"
fi

# Create APIs file
if [[ $has_apis == "y" ]]; then
  cp "$apis_template" "$apis_file"
  sed -i "" "s/<plugincode>/$plugin_code/g" "$apis_file"
fi

# Create toolbar buttons file
if [[ $has_toolbar_buttons == "y" ]]; then
  cp "$toolbar_buttons_template" "$toolbar_buttons_file"
fi

# Create demo files
if [[ $has_demo == "y" ]]; then
  mkdir -p "./modules/ROOT/examples/live-demos/$plugin_code"
  cp "$demo_html_template" "$demo_html_file"
  cp "$demo_js_template" "$demo_js_file"
  sed -i "" "s/<plugincode>/$plugin_code/g" "$demo_html_file"
  sed -i "" "s/<plugincode>/$plugin_code/g" "$demo_js_file"
fi

# Add configuration options to plugin file
target_line_number=$(grep -n -F "include::partial\$configuration/<setting_name>.adoc[leveloffset=+1]" "$plugin_file" | cut -d ":" -f 1)

for option in "${config_options[@]}"; do
  new_line="include::partial\$configuration/$option.adoc[leveloffset=+1]"
  sed -i "" "$target_line_number a\\
$new_line" "$plugin_file"
  ((target_line_number++))
done

sed -i "" "/include::partial\$configuration\/<setting_name>.adoc\[leveloffset=+1\]/d" "$plugin_file"

# Update nav file
nav_file="./modules/ROOT/nav.adoc"
if [[ $category == "premium" ]]; then
  target_line_number=$(grep -n -F "** Premium plugins" "$nav_file" | cut -d ":" -f 1)
else
  target_line_number=$(grep -n -F "** Open source plugins" "$nav_file" | cut -d ":" -f 1)
fi
sed -i "" "$target_line_number a\\
*** xref:$plugin_code.adoc[$plugin_name] // TODO: Move this to the correct alphabetical position
" "$nav_file"

################################################################################
############################### Success Message ###############################
################################################################################

echo -e "\nPlugin documentation created successfully!\n"

################################################################################
############################### Manual Creation ################################
################################################################################

new_plugin_folder="$plugin_code"
mkdir -p "$new_plugin_folder"

# Print all files that need to be created/updated manually
files_to_create=(
  "$icon_list"
  "$demo_example"
  "$nav"
  "$full_featured_html"
  "$full_featured_js"
  "$available_menu_items"
  "$available_toolbar_buttons"
  "$editor_command_identifiers"
  "$events"
  "$opensource_plugins"
  "$premium_plugins"
)

checklist_file="$new_plugin_folder/checklist.md"
# Copy each file in files_to_create into the new_plugin_folder
for file in "${files_to_create[@]}"; do
  # Remove the TEMPLATE_DIR prefix from the file path
  file_path="${file#"$TEMPLATE_DIR"/}"
  # Create the necessary directories in the new_plugin_folder
  mkdir -p "$new_plugin_folder/$(dirname "$file_path")"
  # Copy the file contents to the corresponding location in the new_plugin_folder
  cp "$file" "$new_plugin_folder/$file_path"

  # Replace plugin name and plugin code and category in the copied files
  sed -i "" "s/<plugincode>/$plugin_code/g" "$new_plugin_folder/$file_path"
  sed -i "" "s/<Plugin name>/$plugin_name/g" "$new_plugin_folder/$file_path"
  sed -i "" "s/<premium|opensource>/$category/g" "$new_plugin_folder/$file_path"

  # Add file to the checklist
  echo "- [ ] $new_plugin_folder/$file_path" >>"$checklist_file"
done

echo -e "Checklist file created: ./$checklist_file\n"